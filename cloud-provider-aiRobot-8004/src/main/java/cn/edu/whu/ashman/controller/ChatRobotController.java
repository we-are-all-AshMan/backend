package cn.edu.whu.ashman.controller;import cn.edu.whu.ashman.entities.MessageResult;import cn.edu.whu.ashman.service.Impl.Chat;import cn.edu.whu.ashman.entities.Question;import cn.edu.whu.ashman.service.Impl.QuestionService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RestController;/** * @Author Liu WeiFan * @create 2020年7月11日 20：56 */@RestControllerpublic class ChatRobotController {    @Autowired    Chat chat = null;    @Autowired    QuestionService questionService = null;    /**     * 响应问题，返回答案     * @param message     * @return     */    @GetMapping("/chattingRobot/{message}")    public MessageResult getRespond(@PathVariable("message") String message) {        MessageResult messageResult = null;        try {            String respond = chat.getRespond(message);            messageResult = new MessageResult(303, respond);            //questionService.updateQuestionPlusOne(message);        } catch (Exception e) {            e.printStackTrace();            messageResult = new MessageResult(304, "服务器异常");        }        return messageResult;    }    /**     * 获取预测的问题     * @param message     * @return     */    @GetMapping("/chattingRobot/predict/{message}")    public MessageResult getPredictQuestion(@PathVariable("message") String message) {        MessageResult messageResult = null;        try {            messageResult = new MessageResult(305, chat.getSimilarQuestionWithIndexOf(message));        } catch (Exception e) {            e.printStackTrace();            messageResult = new MessageResult(304, "服务器异常");        }        return messageResult;    }    /**     * 获取热门问题     * @return     */    @GetMapping("/chattingRobot/getHotQuestion")    private MessageResult getHotQuestion(){        MessageResult messageResult = null;        try {            messageResult = new MessageResult(309, questionService.getHotQuestion());        } catch (Exception e) {            e.printStackTrace();            messageResult = new MessageResult(304, "服务器异常");        }        return messageResult;    }    @GetMapping("/chattingRobot/administrator/addQuestion")    public MessageResult addQuestion(@PathVariable("question")String question){        MessageResult messageResult = null;        try{            questionService.insertQuestionForAdministrator(question);            messageResult = new MessageResult(306,"添加成功");        }catch (Exception e){            e.printStackTrace();            messageResult = new MessageResult(304,"添加失败");        }        return messageResult;    }    @GetMapping("/chattingRobot/administrator/updateAnswer")    public MessageResult updateAnswer(@PathVariable("question") Question question){        MessageResult messageResult = null;        try{            questionService.updateQuestion(question);            messageResult = new MessageResult(307,"添加成功");        }catch (Exception e){            e.printStackTrace();            messageResult = new MessageResult(304,"添加失败");        }        return messageResult;    }    @GetMapping("/chattingRobot/administrator/deleteQuestion")    public MessageResult deleteQuestion(@PathVariable("question") String question){        MessageResult messageResult = null;        try{            questionService.deleteQuestionForAdministrator(question);            messageResult = new MessageResult(308,"添加成功");        }catch (Exception e){            e.printStackTrace();            messageResult = new MessageResult(304,"添加失败");        }        return messageResult;    }}